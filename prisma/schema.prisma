generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  ADMIN
  OWNER
  CLIENT
}

enum BookingStatus {
  PENDING
  APPROVED
  COMPLETED
}

//-----------------------------   USER     ---------------------------------
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email            String    @unique
  dni              String    @unique
  firstname        String
  lastname         String
  role             UserRoles @default(OWNER)
  password         String
  passwordVerified DateTime?
  phoneNumber      String?
  
  mpCredentials    MercadoPagoCredentials?
  bookings Booking[]
  business Business[]
  subscriptionPayments Subscription[]
}

model MercadoPagoCredentials {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  token String
  key   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId @unique
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  paymentId String? @unique
  amount Float
  expirationDate   DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}
// ------------------------------    RESERVATIONS       ----------------------------
model Booking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  status    BookingStatus @default(PENDING)
  date      DateTime
  cancelled Boolean       @default(false)
  schedule  String
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?   @db.ObjectId
  totalAmount Float? @default(0)
  username String?
  
  payment   BookingPayment?
  
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String   @db.ObjectId
}

model BookingPayment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  paymentId String @unique
  amount    Float  @default(0)

  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId String  @unique @db.ObjectId
}

enum BusinessLabels {
  RESTAURANT
  CAFE
  BAR
  HOTEL
  BANK
  GROCERY
  PHARMACY
  FASHION
  FITNESS
  ENTERTAINMENT
  CULTURE
}

model Service {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  price Float

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String @db.ObjectId

  bookings Booking[]
}

model Business {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title               String   @unique
  desc               String
  image              String?
  address            String?
  addressDesc        String?
  website            String?
  disabled           Boolean @default(false)

  labels   String[] 
  schedule String[]  @default([])
  days     Boolean[] @default([true, true, true, true, true, true, false])
  services Service[]

  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String? @db.ObjectId
}
